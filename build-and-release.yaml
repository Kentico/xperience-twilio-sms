name: '$(Build.DefinitionName) #$(Build.BuildId)'

trigger:
  - master

parameters:
  - name: AgentPoolName
    displayName: Agent pool name
    type: string
    default: ADO Windows Server 2022

  - name: AgentName
    displayName: Agent name - single char for any
    type: string
    default: ' '

resources:
  repositories:
    - repository: self
      type: git

  containers:
    - container: Windows
      image: base/mcr-dotnet-sdk-8.0-servercore-ltsc2022:release
      endpoint: xperienceagentshub.azurecr.io

stages:
  - stage: Build
    jobs:
      - job: Build
        displayName: Build, Sign, Test & Pack

        pool:
          name: ${{ parameters.AgentPoolName }}
          ${{ if ne(length(parameters.AgentName), 1) }}:
            demands:
              - Agent.Name -equals ${{ parameters.AgentName }}
        container: Windows

        workspace:
          clean: resources

        variables:
          - group: Code Sign KV Auth

          - name: Configuration
            value: Release

          - name: DotNetSdkVersion
            value: 5.0.x

        steps:
          - task: DotNetCoreCLI@2
            displayName: Restore dotnet tools
            inputs:
              command: custom
              custom: tool
              arguments: restore
              workingDirectory: $(System.DefaultWorkingDirectory)

          - task: DotNetCoreCLI@2
            displayName: Restore dependencies
            inputs:
              command: restore
              projects: '**/*.csproj'
              feedsToUse: select

          - pwsh: |
              $DirectoryBuildTargetsContent = @"
              <Project>
                  <Target Name="SignAssemblyWithAuthenticodeSignature" AfterTargets="AfterBuild" Condition="'`$(MSBuildProjectFullPath.Contains(&quot;node_modules&quot;))' == 'false'">
                      <PropertyGroup>
                          <XmlSerializersTargetPath>`$(TargetDir)`$(TargetName).XmlSerializers.dll</XmlSerializersTargetPath>
                          <RazorViewsTargetPath>`$(TargetDir)`$(TargetName).Views.dll</RazorViewsTargetPath>
                      </PropertyGroup>

                      <ItemGroup>
                          <AssemblyToSign Include="`$(TargetPath)" />
                          <AssemblyToSign Include="`$(XmlSerializersTargetPath)" Condition="Exists('`$(XmlSerializersTargetPath)')" />
                          <AssemblyToSign Include="`$(RazorViewsTargetPath)" Condition="Exists('`$(RazorViewsTargetPath)')" />
                      </ItemGroup>

                      <Exec Command="dotnet AzureSignTool sign --azure-key-vault-url $(AuthenticodeKeyVaultUrl) --azure-key-vault-tenant-id $(AuthenticodeTenantId) --azure-key-vault-client-id $(AuthenticodeClientId) --azure-key-vault-client-secret $(AuthenticodeClientSecret) --azure-key-vault-certificate $(AuthenticodeCertificateName) --timestamp-rfc3161 http://timestamp.digicert.com --skip-signed %(AssemblyToSign.Identity)" />
                  </Target>
              </Project>
              "@

              Set-Content -Value $DirectoryBuildTargetsContent -Path "$(System.DefaultWorkingDirectory)/Directory.Build.targets"
            displayName: Create Directory.Build.targets to sign DLLs

          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: build
              projects: '**/*.csproj'
              arguments: --no-restore --configuration ${{ variables.Configuration }}
            env:
              AuthenticodeClientSecret: $(AuthenticodeClientSecret)
              # Roll-forward behavior set for AzureSignTool dotnet tool (see .config\dotnet-tools.json) which requires .Net 6.0 runtime
              DOTNET_ROLL_FORWARD: Major

          - task: DotNetCoreCLI@2
            displayName: Test
            inputs:
              command: test
              projects: '**/*.Tests.csproj'
              arguments: --no-build --configuration ${{ variables.Configuration }}

          - task: DotNetCoreCLI@2
            displayName: Create NuGet package
            inputs:
              command: pack
              packagesToPack: '**/*.csproj'
              configuration: ${{ variables.Configuration }}
              nobuild: true
              versioningScheme: 'off'

          - task: PublishPipelineArtifact@1
            displayName: Publish NuGet package as artifact
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)
              artifact: artifact
              publishLocation: pipeline

  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
      - stage: PublishNuGetPackages
        displayName: Publish NuGet packages
        dependsOn: Build

        jobs:
          - deployment: PublishNuGetPackages
            displayName: Publish NuGet packages

            pool:
              name: ${{ parameters.AgentPoolName }}
              ${{ if ne(length(parameters.AgentName), 1) }}:
                demands:
                  - Agent.Name -equals ${{ parameters.AgentName }}
            container: Windows

            workspace:
              clean: resources

            environment: integrations-release-nuget
            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: none

                    - task: DownloadPipelineArtifact@2
                      displayName: Download NuGetPackages
                      inputs:
                        artifact: artifact
                        path: $(Build.ArtifactStagingDirectory)

                    - task: NuGetToolInstaller@1
                      displayName: Install nuget.exe
                      inputs:
                        versionSpec: '>=5.6'
                        checkLatest: true

                    - task: NuGetAuthenticate@0
                      displayName: NuGet Authenticate

                    - task: NuGetCommand@2
                      displayName: NuGet push
                      inputs:
                        command: push
                        packagesToPush: $(Build.ArtifactStagingDirectory)/*.nupkg
                        nuGetFeedType: external
                        publishFeedCredentials: nuget.org
